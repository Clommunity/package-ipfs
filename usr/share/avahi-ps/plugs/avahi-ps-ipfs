#!/bin/bash
#
# Faltar editar-lo
# SERF, els tags nomÃ©s poden tenir un buffer de 512 bytes.
SERFBIN="/opt/serf/serf"
SERF_CONFIGFILE="/etc/avahi-ps-serf.conf"
SERFTAG="services"
SERFSTATUS="alive"
LOGFILE="/tmp/avahi-ps-serf.log"
IPFSTAG="ipfssvc"
IPFSPATH="/etc/cloudy/ipfs/"
IPFSBINPATH="/usr/local/bin/"
IPFSBIN="ipfs"
SERVICESDIR="services/"
IPFSLOG="ipfs.log"
[[ -f $SERF_CONFIGFILE ]] && . $SERF_CONFIGFILE

################################################################################
# TODO: this function does not seem to be used now in this package
################################################################################
comprimir() {
	bzip2 -|base64 -w 0
}

################################################################################
# TODO: this function does not seem to be used now in this package
################################################################################
descomprimir(){
	base64 -d -|bunzip2 -
}

################################################################################
# TODO: this function does not seem to be used now in this package
################################################################################
getMy_SERFTAG_Services() {
	local lServices

	lServices=$($SERFBIN info -format json|jq -c -M ".tags.${SERFTAG}")
	[ ! -z "$lServices" -a "$lServices" != "null" ] && echo "$lServices"|sed 's/^"\(.*\)"$/\1/'|descomprimir|sed "s/'/"'"'"/g"|jq -c .[]
}

################################################################################
# getMyServices(): get the local services currently known to IPFS
#
# This function retrieves the local IPFS directory hash from Serf's IPFS tag. If
# valid, it asks IPFS for the local servers.
#
# TODO: isn't there a better way to know the local IPFS directory hash without
# asking Serf? And, furthermore, to read the local list of services, which is
# actually stored locally in a directory? :S
################################################################################
getMyServices() {
	local myServicesDirHash
	local myServices

	myServicesDirHash=$($SERFBIN info -format json|jq -c -M ".tags.${IPFSTAG}" | tr -d '"')
	if [ ! -z "$myServicesDirHash" -a "$myServicesDirHash" != "null" ]
	then
		myServices=$(getIPFSServices $myServicesDirHash)
		echo $myServices
	fi
}

################################################################################
# getIPFSServices(): get the list of services announced under a directory hash
#
# This function retrieves a public list of services which are stored in the
# directory specified by its IPFS hash.
#
# TODO: add checks (e.g. directory empty, etc.)
################################################################################
getIPFSServices() {
	local svcHash
	local lServices
	local defServices
	defServices=""
	svcHash=$1
	export IPFS_PATH=$IPFSPATH
	lServices=$(timeout 10 $IPFSBINPATH$IPFSBIN ls $svcHash 2> /dev/null | grep -o "\w*Qm\w*")
	for i in $lServices
	do
	 svc=$(timeout 5 $IPFSBINPATH$IPFSBIN cat $i 2> /dev/null)
	 echo $svc >> "$IPFSPATH"svc
	 if [ ! -z "$defServices" ]
	 then
		defServices=$svc","$defServices
	 else
		defServices=$svc
	 fi
	done
	echo "$defServices" | sed "s/'/"'"'"/g" #| jq -c -M .[]
}

################################################################################
# addIPFSService: add a service to the local IPFS services listed
#
# This function receives a new service to publish, which has been checked and
# validated by the previous nested function calls and, finally, actually adds it
# to the local IPFS services list.
#
# TODO: code cleanup needed.
################################################################################
addIPFSService() {
	export IPFS_PATH=$IPFSPATH

	# Calculate the MD5 checksum of the service information
	hash=$(echo $2 $3 | md5sum | cut -d' ' -f 1)
	if [ ! -z "$hash" ]; then
		# Save the service information to a file named with the service info's hash
		# and add the services directory, which will have changed, to IPFS
		echo $1 > $IPFSPATH$SERVICESDIR$hash && addServiceDirToIPFS #directoryhash=$($IPFSBINPATH$IPFSBIN add -r $IPFSPATH$SERVICESDIR | rev | cut -d' ' -f 2 | rev | tail -n 1)
		##add directory to IPFS and get hash of directory
		#[ ! -z "$directoryhash" ] && $SERFBIN tags -set ${IPFSTAG}=$directoryhash && echo "added directory "$directoryhash >> $IPFSPATH$IPFSLOG
		#$SERFBIN tags -set ${IPFSTAG}=$directoryhash
		#publish to ipns peer id
		#$IPFSBIN name publish $directoryhash
	fi
}

################################################################################
# addServiceDirToIPFS(): add the services directory to IPFS and publish it via
# Serf
#
# This function adds the services directory (recursively) to IPFS, gets the
# corresponding hash and publishes it via Serf.
#
# TODO: find out the purpose of the last command.
################################################################################
addServiceDirToIPFS(){
	# Add the directory to IPFS and retrieve its hash
	directoryhash=$($IPFSBINPATH$IPFSBIN add -r $IPFSPATH$SERVICESDIR | rev | cut -d' ' -f 2 | rev | tail -n 1)
	# TODO: IPFS could have done the magic output manipulation for us:
	#       directoryhash=$($IPFSBINPATH$IPFSBIN add -r -Q $IPFSPATH$SERVICESDIR)

	# If the hash is not null, publish it via SERF
	# TODO: beyond not null, its length could also be checked
	[ ! -z "$directoryhash" ] && $SERFBIN tags -set ${IPFSTAG}=$directoryhash #&& echo "added directory "$directoryhash >> $IPFSPATH$IPFSLOG

	# TODO: why is this repeated?
	$SERFBIN tags -set ${IPFSTAG}=$directoryhash
}

################################################################################
# TODO: this function does not seem to be used now in this package
################################################################################
addMySERFService() {
	myServices="$(getAllButOneServices $2 $3)"
	defServices=""
	for i in $myServices
	do
		defServices=$i","$defServices
	done
	defServices=$defServices$1
	$SERFBIN tags -set ${SERFTAG}=$(echo "["$defServices"]" | comprimir)
}

remMyIPFSService() {
	rm $IPFSPATH$SERVICESDIR$1 && addServiceDirToIPFS
}

remMyService() {
	myServices="$(getAllButOneServices $1 $2)"
	defServices=""
	for i in $myServices
	do
		if [ ! -z "$defServices" ]
		then
			defServices=$i","$defServices
		else
			defServices=$i
		fi
	done
	[ -z "$defServices" ] && $SERFBIN tags -delete ${SERFTAG} || $SERFBIN tags -set ${SERFTAG}=$(echo "["$defServices"]" | comprimir)
}

################################################################################
# existService(): check if a given service exists in IPFS's local list
#
# This function checks if the given service matches any in the local list of
# services.
################################################################################
existService(){
	local _Type
	local _Desc
	local _MCloud
	local _Ip
	local _Port
	local _Device
	local _TXT

	_Type=$1
	_Desc=$2
	_MCloud=$3
	_Ip=$4
	_Port=$5
	_Device=$6
	_TXT=$7

	echo $(getMyServices | grep '"s":"'$_Type'"'.*'"p":"'$_Port'"')
}

################################################################################
# setToMyServices(): look for a service in IPFS's local list and add if missing
#
# This function checks if the given service is in IPFS' local list of services
# and adds it if it is not there.
#
# TODO: This could most likely be merged with the previous nested functions that
# ended up calling this one.
################################################################################
setToMyServices(){
	local _Type
	local _Desc
	local _MCloud
	local _Ip
	local _Port
	local _Device
	local _TXT

	_Type=$1
	_Desc=$2
	_MCloud=$3
	_Ip=$4
	_Port=$5
	_Device=$6
	_TXT=$7

	myService=$(existService "$_Type" "$_Desc" "$_MCloud" "$_Ip" "$_Port" "$_Device" "$_TXT")

	[ -z "$myService" ] && {
		addIPFSService "{'s':'$_Type','d':'$_Desc','m':'$_MCloud','i':'$_Ip','p':'$_Port','e':'$_Device','t':'$_TXT'}" "$_Type" "$_Port"
	}
}

getOneService() {
	local _Type
	local _Port

	_Type=$1
	_Port=$2

	getMyServices | grep '"s":"'$_Type'"'.*'"p":"'$_Port'"'
}

getAllButOneServices() {
	local _Type
	local _Port

	_Type=$1
	_Port=$2

	getMyServices | grep -v '"s":"'$_Type'"'.*'"p":"'$_Port'"'
}

################################################################################
# ipfs_add_service(): receive a request to add a service and add it.
#
# This function performs a minimal processing on the parameters and actually
# calls the actual addition of the service via IPFS
#
# TODO: it might be merged with ipfs_publish_service() function
################################################################################
ipfs_add_service(){

	local _DESCRIPTION
	local _TYPE
	local _PORT
	local _TXT

	_DESCRIPTION="$(echo $1|sed 's/ /_/g')"
	_TYPE="$2"
	_PORT="$3"
	_TXT=$(echo "$4"|tr "&" " ")

	setToMyServices "$_TYPE" "$_DESCRIPTION" "${NODENAME}.${CLOUD_NAME}.local" "${PUBLIC_IP}" "$_PORT" "$DEVICE_NAME" "$_TXT"
}

ipfs_rem_service(){

	local Service
	local Port
	local s
	Service=$1
	Port=$2
	s=$(getOneService $1 $2)
	[ ! -z "$s" ] && remMyIPFSService $(echo $Service $Port | md5sum | cut -d' ' -f 1)
}

ipfs_add_nodeid() {
	local node_id
	local information

	node_id="$1"
	information="$2"

	echo '{"node_id":'$node_id','${information:1}

}

################################################################################
# ipfs_find()
#
# TODO: remove nasty echos
################################################################################
ipfs_find_(){

	echo "AAAAAA_ipfs_find_ ($1) ($2)"

	local defServices

	defServices=""
	ipfsServices=""

	# Get the list of services via Serf, in a space-separated array of json
	# strings (i.e.: "{json_info_0} {json_info_1} {json_info_2}...")

	# deprecated listServices="$($SERFBIN members -status=$SERFSTATUS -format json|jq -c -M '.members[]')"
	listServicesJson="$($SERFBIN members -status=$SERFSTATUS -format json 2> /dev/null)"

	# If the services have been listed without errors, compact the JSON blob
	if [ $? -eq 0 ]; then
		listServices="$(echo $listServicesJson | jq -c -M '.members[]')"

		# If the services have been compacted successfully, iterate on them
		if [ $? -eq 0 ]; then
			for node in $listServices; do
				node_id=$(echo "$node"|jq -c -M ".name")
				mytags=$(echo "$node"|jq -c -M ".tags.${SERFTAG}"|sed 's/^"\(.*\)"$/\1/'|grep -v "^null$")
				ipfstags=$(echo "$node"|jq -c -M ".tags.${IPFSTAG}"|sed 's/^"\(.*\)"$/\1/'|grep -v "^null$")

				# Skip the pure Serf part, which is handled by the package-serf
				# package code itself
				# [ ! -z "$mytags" ] && {
				# 	myServices=$(echo "$mytags"|descomprimir|sed "s/'/"'"'"/g"|jq -c -M .[])
				# 	for i in $myServices
				# 	do
				# 		iservice="$(serf_add_nodeid "$node_id" "$i")"
				# 		if [ ! -z "$defServices" ]
				# 		then
				# 			defServices=$iservice","$defServices
				# 		else
				# 			defServices=$iservice
				# 		fi
				# 	done
				# }

				# Process the IPFS tag of the node, if present
				[ ! -z "$ipfstags" ] && {
					echo "AAAAAA node $node"
					echo "AAAAAA ipfstag $ipfstags"
					myServices=$(getIPFSServices $ipfstags)
					echo "AAAAAA myservices $myServices"

					# If the IPFS directory has been retrieved, iterate over
					# the listed services
					if [ ! -z "$myServices" ]; then
						for i in "$myServices"; do
							echo "AAAAAA myservices i $i"
							iservice="$(ipfs_add_nodeid "$node_id" "$i")"
							if [ ! -z "$defServices" ]
							then
								defServices=$iservice","$defServicesa
							else
								defServices=$iservice
							fi
						done
					fi
				}
			done
		fi
	fi
	echo "[$defServices]"
}

################################################################################
# ipfs_publish_service(): receive a request to publish a service and publish it.
#
# This function performs a minimal test on the parameters and calls the actual
# addition of the service via IPFS
#
# TODO: remove nasty echo
################################################################################
ipfs_publish_service() {
	echo "AAAAAA_ipfs_publish_service ($1) ($2) ($3) ($4)"

	local _DESCRIPTION
	local _TYPE
	local _PORT
	local _TXT

	if [ $# -lt 3 ]
	then
		avahi-ps-help
	fi

	_DESCRIPTION="$1"
	_TYPE="$2"
	_PORT="$3"
	_TXT=${4:-""}

	ipfs_add_service "$_DESCRIPTION" "$_TYPE" "$_PORT" "$_TXT"
}

ipfs_unpublish_service(){
	local _TYPE
	local _PORT

	if [ $# -lt 2 ]
	then
		avahi-ps-help
	fi
	_TYPE="$1"
	_PORT=$2
	ipfs_rem_service $_TYPE $_PORT
}

################################################################################
# ipfs_search_service():
#
# TODO: remove nasty echo
################################################################################
ipfs_search_service(){
	echo "AAAAAA_ipfs_search_service ($1) ($2)"
	local _SERVICE
	local _HOST
	if [ -z "$1" -o "$1" == "." ]
	then
		_SERVICE=".*"
	fi
	if [ -z "$2" -o "$2" == "." ]
	then
		_HOST=".*\.$CLOUD_NAME\.local"
	else
		_HOST="$2\.$CLOUD_NAME\.local"
	fi
	ipfs_find_ "$_SERVICE" "$_HOST"
}
